#include"DarkGDK.h"
#include<string.h>

const int title_screen_image=1;
const int intro_screen_image=2;
const int egg_image=3;
const int broken_egg_image=4;
const int farm_image=5;
const int basket_image=6;
const int hit_basket_image=7;
const int vulture_image=8;

const int farm_sprite=1;
const int basket_sprite=2;
const int egg_sprite=3;
const int hit_basket_sprite=4;
const int broken_egg_sprite=5;
const int vulture_sprite=6;

const int vulture_cols=4;
const int vulture_rows=2;
const int start_frame=1;
const int end_frame=8;

const int pop_sound=1;
const int clap_sound=2;
const int type_sound=3;
const int complete_sound=4;
const int perfect_score_scound=5;
const int beep_sound=6;

const int intro_music=1;
const int main_music=2;
const int last_music=3;

const int tenth_second=100;
const int one_second=1000;
const int four_second=4000;

const int max_eggs=10;
const int basket_move=4;
const int vulture_move=2;
const float acceleration=0.5;
const int refresh_rate=60;
//game1

const int pointer_image=1;
const int bug_image=2;
const int intro_image=3;
const int grass_image=4;
const int pointer_sprite=1;
const int bug_sprite=2;
const int offset_x=13;
const int offset_y=0;
const int rows=1;
const int cols=2;
const int delay=500;
const int max_time=10000;
//game2






void loadResources();
void intro();
void createSprites(int &,int &,int &,int&,int &,int &);
void moveBasket(int &);
void moveVulture(int &);
void moveEgg(int ,int ,int &,int &,int &);
void checkCollision(int ,int &,int &,int &,int &,int &);
void showHitBasket();
void showBrokenEgg();
void resetEgg(int ,int ,int &);
void render(int ,int ,int ,int ,int ,int );
bool summaryScreen(int ,int );
void deleteSprites();

//game1

void setup();
void displayintro();
void initmouse();
void initbug();
void updatemouse();
void updatebug();
void generatenewbug();
int elapsedtime(int);
bool displaybugszapped(int);
bool mousefullclick(int &,int &);
bool onsprite(int,int,int);
//game2

void generateRandom(int [],int);
void setText();
void displayRandom(int [],int);
void getUserNumbers(int [],int);
bool displayResults(int [],int [],int);
int matchingNumbers(int [],int [],int);
void displayArray(int,int,int [],int);
//game3

void getInput(char[],char[],char[],char[]);
void displayStory(char[],char[],char[],char[]);
//ending

void DarkGDK()
{
	int eggs=max_eggs;
	int caught=0;
	int broken=0;
	int basketx,baskety;
	int vulturex,vulturey;
	int eggx,eggy;
	int time=0;//game1

	int mousex,mousey;
	int bugszapped=0;
	bool stillplaying=true;//game2

	const int size=5;
	int random[size];
	int user[size];//game3

	const int word_size=30;

	char year[word_size];
	char college[word_size];
	char food[word_size];
	char emotion[word_size];//ending


	bool game1=true;
	bool game2=true;
	bool game3=true;
	bool results=true;
	

	if(game1)
	{
		loadResources();
		intro();
		createSprites(basketx,baskety,eggx,eggy,vulturex,vulturey);
		while(LoopGDK()&&eggs>0)
		{
			moveBasket(basketx);
			moveVulture(vulturex);
			moveEgg(vulturex,vulturey,eggx,eggy,time);
			checkCollision(vulturey,eggy,caught,broken,eggs,time);
			render(basketx,baskety,eggx,eggy,vulturex,vulturey);
		}
		game2=summaryScreen(caught,broken);
		game1=false;
	}//game1

    if(game2)
	{
		setup();
		int starttime(dbTimer());
		while(LoopGDK()&&stillplaying)
		{
			dbPasteImage(grass_image,0,0);
			updatemouse();
			updatebug();
			if(mousefullclick(mousex,mousey))
			{
				if(onsprite(bug_sprite,mousex,mousey))
				{
					bugszapped++;
					generatenewbug();
				}
			}
			if(elapsedtime(starttime)>max_time)
			{
				stillplaying=false;
				game3=displaybugszapped(bugszapped);
			}
			dbSync();
		}
		game2=false;
	}//game2

	dbWaitKey();
	if(game3)
	{
		dbSetWindowTitle("Game3");
		generateRandom(random,size);
		setText();
		displayRandom(random,size);
		getUserNumbers(user,size);
		results=displayResults(random,user,size);
		dbWaitKey();
	}

	dbWaitKey();
	if(results)
	{
		dbCLS();
		dbSetWindowTitle("Ending");
		dbPrint("Thanks For your Playing, and Give you a gift ");
		dbPrint("^_^o~ 努力！");
		getInput(year,college,food,emotion);
		displayStory(year,college,food,emotion);
		dbPrint("GoodBye My Firend!");
		dbPrint("Press any key to exit");
		dbWaitKey();
	}




}

void loadResources()
{
	dbSetImageColorKey(0,255,0);

	dbLoadImage("titleScreen.bmp",title_screen_image);
	dbLoadImage("intro1.bmp",intro_screen_image);
	dbLoadImage("farm.bmp",farm_image);
	dbLoadImage("egg.bmp",egg_image);
	dbLoadImage("brokenEgg.bmp",broken_egg_image);
	dbLoadImage("basket.bmp",basket_image);
	dbLoadImage("hitBasket.bmp",hit_basket_image);

	dbLoadMusic("vultureTrouble.mp3",intro_music);
	dbLoadMusic("vultureLevel.mp3",main_music);
	dbLoadMusic("musicH.mp3",last_music);

	dbLoadSound("pop.wav",pop_sound);
	dbLoadSound("clap.wav",clap_sound);
	dbLoadSound("type.wav",type_sound);
	dbLoadSound("complete.wav",complete_sound);
	dbLoadSound("vulturePerfect.wav",perfect_score_scound);
	dbLoadSound("bounce.wav",beep_sound);
}

void intro()
{
	dbSetWindowTitle("Game1");

	dbLoopMusic(intro_music);

	dbPasteImage(title_screen_image,0,0);
	dbWaitKey();

	dbCLS();

	dbPasteImage(intro_screen_image,0,0);
	dbWaitKey();

	dbStopMusic(intro_music);
	
	dbSyncOn();
	dbSyncRate(refresh_rate);
}

void createSprites(int &basketx,int &baskety,int &eggx,int&eggy,int &vulturex,int &vulturey)
{
	int spriteNum;

	dbSprite(farm_sprite,0,0,farm_image);
	dbSprite(basket_sprite,0,0,basket_image);
	dbSprite(egg_sprite,0,0,egg_image);
	dbSprite(hit_basket_sprite,0,0,hit_basket_image);
	dbSprite(broken_egg_sprite,0,0,broken_egg_image);

	dbHideSprite(hit_basket_sprite);
	dbHideSprite(broken_egg_sprite);

	dbCreateAnimatedSprite(vulture_sprite,"vulture.bmp",vulture_cols,vulture_rows,vulture_image);
	
	vulturex=dbScreenWidth()/2-dbSpriteWidth(vulture_sprite)/2;
	vulturey=0;

	eggx=vulturex+dbSpriteWidth(vulture_sprite)-dbSpriteWidth(egg_sprite);
	eggy=vulturey+dbSpriteHeight(vulture_sprite)/2;

	dbRandomize(dbTimer());
	basketx=dbRND(dbScreenWidth()-dbSpriteWidth(basket_sprite));
	baskety=dbScreenHeight()-dbSpriteHeight(basket_sprite);

	for(int count=0;count<max_eggs;count++)
	{
		spriteNum=100+count;
		dbCloneSprite(egg_sprite,spriteNum);
		dbScaleSprite(spriteNum,50);
		dbSprite(spriteNum,dbSpriteWidth(egg_sprite)/2*count,0,egg_image);
	}
}

void moveBasket(int &basketx)
{
	if(dbLeftKey())
	{
		if(basketx<=0)
			basketx=0;
		else
			basketx-=basket_move;
	}
	if(dbRightKey())
	{
		if(basketx+dbSpriteWidth(basket_sprite)>=dbScreenWidth())
			basketx=dbScreenWidth()-dbSpriteWidth(basket_sprite);
		else
			basketx+=basket_move;
	}
}

void moveVulture(int &vulturex)
{
	dbPlaySprite(vulture_sprite,start_frame,end_frame,tenth_second);

	if(vulturex<=0)
		dbMirrorSprite(vulture_sprite);
	if(vulturex+dbSpriteWidth(vulture_sprite)>=dbScreenWidth())
		dbMirrorSprite(vulture_sprite);
	if(dbSpriteMirrored(vulture_sprite))
		vulturex+=vulture_move;
	else
		vulturex-=vulture_move;
}

void moveEgg(int vulturex,int vulturey,int &eggx,int &eggy,int &time)
{
	float distance;
	if(dbSpriteMirrored(vulture_sprite))
		eggx=vulturex+dbSpriteWidth(vulture_sprite)-dbSpriteWidth(egg_sprite);
	else
		eggx=vulturex;

	distance=0.5*acceleration*time*time;
	eggy=distance+vulturey+dbSpriteHeight(vulture_sprite)/2;
	time++;
}

void checkCollision(int vulturey,int &eggy,int &caught,int &broken,int &eggs,int &time)
{
	if(dbSpriteCollision(egg_sprite,basket_sprite))
	{
		caught++;
		eggs--;
		showHitBasket();
		resetEgg(eggs,vulturey,eggy);
		time=0;
	}
	else if(eggy>dbScreenHeight())
	{
		broken++;
		eggs--;
		showBrokenEgg();
		resetEgg(eggs,vulturey,eggy);
		time=0;
	}
}

void showHitBasket()
{
	dbSyncOff();
	dbShowSprite(hit_basket_sprite);
	dbPlaySound(pop_sound);
	dbWait(tenth_second);
	dbHideSprite(hit_basket_sprite);
	dbSyncOn();
}

void showBrokenEgg()
{
	dbSyncOff();
	dbShowSprite(broken_egg_sprite);
	dbPlaySound(clap_sound);
	dbWait(tenth_second);
	dbHideSprite(broken_egg_sprite);
	dbSyncOn();
}

void resetEgg(int eggs,int vulturey,int &eggy)
{
	if(dbSpriteExist(eggs+100))
		dbDeleteSprite(eggs+100);
	dbWait(tenth_second);
	eggy=vulturey+dbSpriteHeight(vulture_sprite)/2;
}

void render(int basketx,int baskety,int eggx,int eggy,int vulturex,int vulturey)
{
	dbSprite(basket_sprite,basketx,baskety,basket_image);
	dbSprite(egg_sprite,eggx,eggy,egg_image);
	dbSprite(hit_basket_sprite,basketx,baskety,hit_basket_image);
	dbSprite(broken_egg_sprite,eggx,dbScreenHeight()-dbSpriteHeight(broken_egg_sprite),broken_egg_image);
	dbSprite(vulture_sprite,vulturex,vulturey,vulture_image);

	dbSync();
}

bool summaryScreen(int caught,int broken)
{
	deleteSprites();

	dbSyncOff();
	dbCLS();

	dbSetTextSize(36);
	dbSetTextFont("Freestyle Script");
	dbCenterText(dbScreenWidth()/2,100,"GAME1 OVER");

	dbPlaySound(complete_sound);
	dbWait(four_second);

	for(int caughtCount=0;caughtCount<=caught;caughtCount++)
	{
		dbCLS();
		dbPasteImage(egg_image,200,240);
		dbPasteImage(broken_egg_image,300,240);

		dbCenterText(dbScreenWidth()/2,100,"GAME1 OVER");
		dbText(240,240,"x");
		dbText(380,240,"x");
		dbText(260,240,dbStr(caughtCount));
		dbText(400,240,dbStr(broken));

		dbPlaySound(type_sound);
		dbWait(tenth_second);

		dbCenterText(dbScreenWidth()/2,400,dbStr(caughtCount*1000));

		if(caughtCount>max_eggs/2)
		{
			dbCenterText(dbScreenWidth()/2,200,"Press Any Key to Game2...");
			dbPlaySound(perfect_score_scound);
			dbWait(one_second);
			dbWaitKey();
			return true;
		}
		
	}
	dbWaitKey();
	return false;
}

void deleteSprites()
{
		dbDeleteSprite(farm_sprite);
		dbDeleteSprite(basket_sprite);
		dbDeleteSprite(egg_sprite);
		dbDeleteSprite(hit_basket_sprite);
		dbDeleteSprite(broken_egg_sprite);
		dbDeleteSprite(vulture_sprite);
}
//game1

void setup()
{
	dbSetWindowTitle("Game2");
	displayintro();
	dbRandomize(dbTimer());
	dbSetImageColorKey(0,255,0);
	initmouse();
	initbug();
	dbLoadImage("Grass.bmp",grass_image);

	dbSyncOn();
	dbSyncRate(refresh_rate);
}

void displayintro()
{
	dbLoadImage("Intro2.bmp",intro_image);
	dbPasteImage(intro_image,0,0);

	dbWaitKey();
}

void initmouse()
{
	dbHideMouse();

	int centerx=dbScreenWidth()/2;
	int centery=dbScreenHeight()/2;

	dbPositionMouse(centerx,centery);
	dbLoadImage("HandPointer.bmp",pointer_image);

	dbSprite(pointer_sprite,centerx,centery,pointer_image);
	dbOffsetSprite(pointer_sprite,offset_x,offset_y);

	dbSetSpritePriority(pointer_sprite,1);
}
void initbug()
{
	dbCreateAnimatedSprite(bug_sprite,"ShinyBug.bmp",cols,rows,bug_image);
	dbSetSpritePriority(bug_sprite,0);
	generatenewbug();
}
void updatemouse()
{
	int mousex=dbMouseX();
	int mousey=dbMouseY();

	dbSprite(pointer_sprite,mousex,mousey,pointer_image);
}

void updatebug()
{
	int bugx=dbSpriteX(bug_sprite);
	int bugy=dbSpriteY(bug_sprite);

	dbPlaySprite(bug_sprite,rows,cols,delay);
	dbSprite(bug_sprite,bugx,bugy,bug_image);
}

void generatenewbug()
{
	int screenwidth=dbScreenWidth();
	int screenheight=dbScreenHeight();

	int bugwidth=dbSpriteWidth(bug_sprite);
	int bugheight=dbSpriteHeight(bug_sprite);

	int x=dbRnd(screenwidth-bugwidth);
	int y=dbRnd(screenheight-bugheight);

	dbSprite(bug_sprite,x,y,bug_image);
}
int elapsedtime(int starttime)
{
	return dbTimer()-starttime;
}
bool displaybugszapped(int bugs)
{
	int centerx=dbScreenWidth()/2;
	int centery=dbScreenHeight()/2;

	dbSyncOff();

	dbDeleteSprite(bug_sprite);
	dbDeleteSprite(pointer_sprite);

	dbCLS();
	dbCenterText(centerx,centery-20,"Number of bugs zapped:");
	dbCenterText(centerx,centery+20,dbStr(bugs));
	if(bugs>6)
	{
	dbCenterText(centerx,centery+60,"Press any key to Game3....");
	dbWaitKey();
	dbSync();
	return true;
	}

	dbWaitKey();

	dbSyncOn();
	return false;
}
bool mousefullclick(int &x,int &y)
{
	bool buttonclick=false;

	if(dbMouseClick()==1)
	{
		dbPlaySound(6);
		x=dbMouseX();
		y=dbMouseY();

		while(dbMouseClick()==1)
		{}
		buttonclick=true;
	}
	return buttonclick;
}

bool onsprite(int spritenum,int pointx,int pointy)
{
	bool insidesprite;
	int upperx=dbSpriteX(spritenum)-dbSpriteOffsetX(spritenum);
	int uppery=dbSpriteY(spritenum)-dbSpriteOffsetY(spritenum);
	int lowerx=upperx+dbSpriteWidth(spritenum);
	int lowery=uppery+dbSpriteHeight(spritenum);
	if(pointx>=upperx&&pointy>=uppery&&pointx<=lowerx&&pointy<=lowery)
		insidesprite=true;
	else
		insidesprite=false;
	return insidesprite;
}
//game2

void generateRandom(int numbers[],int size)
{
	dbRandomize(dbTimer());
	for(int index=0;index<size;index++)
		numbers[index]=dbRnd(20);
}

void setText()
{
	dbSetTextFont("Arial");
	dbSetTextSize(36);
}
void displayRandom(int numbers[],int size)
{
	const int delay=850;
	int textHeight=dbTextHeight("0");

	int x=dbScreenWidth()/2;
	int y=dbScreenHeight()/2-textHeight/2;

	dbCLS();
	dbCenterText(x,y,"Press any key and observe the numbers");
	dbWaitKey();
	dbCLS();

	for(int index=0;index<size;index++)
	{
		dbCenterText(x,y,dbStr(numbers[index]));
		dbWait(delay);
		dbCLS();
		dbWait(delay);
	}
}
void getUserNumbers(int numbers[],int size)
{
	int textHeight=dbTextHeight("0");

	int x=dbScreenWidth()/2;
	int y=80;

	dbCLS();
	dbCenterText(x,y,"Now it's your turn");
	dbCenterText(x,y+30,"Input the same numbers ,pressing");
	dbCenterText(x,y+60,"Enter after each");
	dbCenterText(x,y+120,"press any key to begin...");
	dbWaitKey();
	dbCLS();

	int textWidth=dbTextWidth("0");

	x=(dbScreenWidth()/2)-(textWidth/2);
	y=(dbScreenHeight()/2)-textHeight/2;

	for(int index=0;index<size;index++)
	{
		dbSetCursor(x,y);//???????//
		numbers[index]=atoi(dbInput());
		dbCLS();
	}
}

bool displayResults(int random[],int user[],int size)
{
	const int line_1_x=dbScreenWidth()/2;
	const int line_1_y=40;

	const int line_2_x=200;
	const int line_2_y=80;

	const int line_3_x=dbScreenWidth()/2;
	const int line_3_y=140;

	const int line_4_x=200;
	const int line_4_y=180;

	const int line_5_x=dbScreenWidth()/2;
	const int line_5_y=240;

	const int line_6_x=dbScreenWidth()/2;
	const int line_6_y=280;
	const int line_7_x=dbScreenWidth()/2;
	const int line_7_y=340;

	int matches=matchingNumbers(random,user,size);

	dbCLS();

	dbCenterText(line_1_x,line_1_y,"Here are the computer's number:");
	displayArray(line_2_x,line_2_y,random,size);

	dbCenterText(line_3_x,line_3_y,"Here are your number:");
	displayArray(line_4_x,line_4_y,user,size);
	dbCenterText(line_5_x,line_5_y,"Correct Matches:");
	dbCenterText(line_6_x,line_6_y,dbStr(matches));

	if(matches==size)
	{
		dbCenterText(line_7_x,line_7_y,"Perfect Match!");
		return true;
	}
	return false;
}

int matchingNumbers(int random[],int user[],int size)
{
	int matches=0;
	for(int index=0;index<size;index++)
	{
		if(random[index]==user[index])
			matches++;
	}
	return matches;
}

void displayArray(int x,int y,int numbers[],int size)
{
	int charWidth=dbTextWidth("0");
	for(int index=0;index<size;index++)
	{
		dbText(x,y,dbStr(numbers[index]));
		x=x+(charWidth*3);
	}
}
//game3

void getInput(char year[],char college[],char food[],char emotion[])
{
	dbPrint("Enter a year(for example,2001):");
	strcpy(year,dbInput());

	dbPrint("Enter the name of the college:");
	strcpy(college,dbInput());

	dbPrint("Enter the name of youe favorite food:");
	strcpy(food,dbInput());

	dbPrint("Enter a name of an emotion:");
	strcpy(emotion,dbInput());
}

void displayStory(char year[],char college[],char food[],char emotion[])
{
	dbPlayMusic(last_music);

	const int line_size=80;

	char line1[line_size];
	char line2[line_size];
	char line3[line_size];
	
	strcpy(line1,"In ");
	strcat(line1,year);
	strcat(line1," I graduated from ");
	strcat(line1,college);
	strcat(line1,".");

	strcpy(line2,"I quickly went to work in a ");
	strcat(line2,food);
	strcat(line2," factory.");

	strcpy(line3,"This made my parents very ");
	strcat(line3,emotion);
	strcat(line3,"!");

	dbPrint();
	dbPrint("Here is your story:");
	dbPrint("------------------");
	
	dbWait(1000);
	dbPlaySound(pop_sound);
	dbPrint(line1);
	dbWait(1000);
	dbPlaySound(1);
	dbPrint(line2);
	dbWait(1000);
	dbPlaySound(1);
	dbPrint(line3);
	dbWait(1000);
	dbPlaySound(1);
	dbPrint();

}
//ending
